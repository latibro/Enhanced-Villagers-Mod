plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "0.12.0-SNAPSHOT" apply false
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        mappings loom.officialMojangMappings()
        // The following line declares the yarn mappings you may select this one as well.
        // mappings "net.fabricmc:yarn:1.19.2+build.3:v2"
    }

    if (rootProject.enabled_platforms.split(",").contains(name)) {
        tasks {
            remapJar {
                archiveAppendix = project.name
            }
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = "${rootProject.archives_base_name}-${rootProject.minecraft_version}"
    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }
}

// Register a custom "collect jars" task that copies the loaders mod jars
// into the root project's build/dist. This makes it easier for me to find them
// for testing and releasing.
task collectJars(type: Copy) {
    // Find the remapJar tasks of projects that aren't :common (so :fabric and :forge) and depend on them.
    def remapJarTasks = subprojects.findAll({ rootProject.enabled_platforms.split(",").contains(it.name) }).collect { it.tasks.named("remapJar") }
    dependsOn remapJarTasks

    // Copy the outputs of the tasks...
    from remapJarTasks

    // ...into build/dist
    into new File(buildDir, "dist")
}

// Set up assemble to depend on the collectJars task, so it gets run on gradlew build.
assemble {
    dependsOn collectJars
}
